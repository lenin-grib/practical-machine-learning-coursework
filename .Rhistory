rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviznce(fit)/df.residual(fit))
sigma1 <- sqrt(deviance(fit)/df.residual(fit))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~., swiss)
vif(mdl)
mdl2 <- lm(Fertility~Agricultue + Education + Catholic + Infant.Mortality, swiss)
mdl2 <- lm(Fertility~Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
swirl()
fit1 <- lm(Fertility ~ Agriculture)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
data("mtcars")
?mtcars
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
fit <- lm(mpg ~ cyl + factor(wt), mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl), mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars)
summary(fit2)
fit2 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit2)
library(lmtest)
install.packages("lmtest")
library(lmtest)
lrtest(fit, fit1)
lrtest(fit, fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f <- lm(x~y)
summary(f)
lm.influence(f)
influence.measures(f)
f <- lm(y~x)
influence.measures(f)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit)
summary(fit2)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
install.packages("devtools")
devtools::install_github("jhudsl/collegeIncome")
library(collegeIncome)
data(college)
devtools::install_github("jhudsl/matahari")
dance_start(value = FALSE, contents = FALSE)
devtools::install_github("jhudsl/matahari")
library(matahari)
dance_start(value = FALSE, contents = FALSE)
head(college)
with(college, plot(p25th~major_code))
with(college, plot(p75th~major_code))
with(college, plot(median~major_code))
dim(college)
library(dplyr)
college1 <- mutate(college, median_adj = median*perc_employed*perc_employed_fulltime)
head(college1)
summary(college)
college1 %>% filter(sample_size>30)
college1 <- college1 %>% filter(sample_size>30)
dim(college1)
college1 <- arrange(college1, median_adj)
head(college1)
college1 <- arrange(college1, -median_adj)
head(college1)
college[17,]
college1[1,13] <- 1
college1[1,14] <- 0
college1[1,20] <- college[1,9]
college1 <- arrange(college1, -median_adj)
head(college1)
fit <- lm(median_adj~factor(major_code), college1)
summary(fit)
fit <- lm(median_adj~major_code, college1)
summary(fit)
with(college1, plot(median_adj~major_code))
with(college1, hist(median_adj))
with(college1, hist(median_adj, breaks = 100))
?shapiro.test
shapiro.test(college1$median_adj)
shapiro.test(college$median)
fit <- lm(median_adj~., college1)
summary(fit)
?cor
cor(college1)
summary(fit <- lm(median_adj~total, college1))
summary(college1)
summary(fit <- lm(median_adj~perc_women, college1))
summary(fit <- lm(median_adj~sample_size, college1))
summary(fit <- lm(median_adj~perc_college_jobs, college1))
summary(fit <- lm(median_adj~major_category, college1))
summary(fit <- lm(median_adj~major, college1))
?lm
summary(fit <- lm(median_adj~major, college1, weights = total))
cats <- unique(college1$major_category)
dim(cats)
college1$major_category
unique(college1$major_category)
length(cats)
summary(fit <- lm(median_adj~major_category, college1))
pvs <- list()
for (i=1:length(cats)){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ major_category_ref, college1)
for (j = 1:(length(cat)-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[i] <- c(college1$major_category[i],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
college1 <- mutate(major_category = as.factor(major_category))
college1 <- mutate(college1, major_category = as.factor(major_category))
pvs <- list()
n = length(cats)
for (i = 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j = 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[i] <- c(college1$major_category[i],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[i] <- c(college1$major_category[i],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(college1$major_category[i],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(new_cat_comp[1],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
as.character(summary(fit)$coef[j,1]),
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
row.names(summary(fit)$coef[j,1])[j],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j+1],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
new_cat_comp <- relevel(college1$major_category, "Business")
summary(lm(median_adj ~ new_cat_comp, college1))
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- data.frame()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- rbind(pvs,c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
install.packages(rlist)
install.packages("rlist")
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
library(rlist)
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
pvs
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits$visits)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- gml(visits ~ date, hits, poisson, offset=log(visits+1))
mdl2 <- glm(visits ~ date, hits, poisson, offset=log(visits+1))
mdl2 <- glm(visits ~ date, hits, family = "poisson", offset=log(visits+1))
mdl2 <- glm(simplystats ~ date, hits, family = "poisson", offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
install.packages("MASS")
library(MASS)
?shuttle
mdl <- glm(use ~ wind, family = "binary", data = shuttle)
?glm
mdl <- glm(use ~ wind, family = binomial, data = shuttle)
summary(mdl)
?shuttle
head(shuttle)
exp(-0.03181)
mdl2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
summary(mdl2)
exp(-3.201e-02)
mdl3 <- glm((1 - use) ~ wind, family = binomial, data = shuttle)
mdl3 <- glm(I(1 - use) ~ wind, family = binomial, data = shuttle)
shuttle$useno <- shuttle$use == "auto"
head(shuttle)
shuttle$useno <- as.integer(shuttle$use == "auto")
head(shuttle)
shuttle$windno <- as.integer(shuttle$wind == "head")
mdl <- glm(useno ~ windno, family = binomial, data = shuttle)
summary(mdl)
mdl2 <- glm(useno ~ windno + magn, family = binomial, data = shuttle)
summary(mdl2)
mdl3 <- glm(I(1 - useno) ~ windno, family = binomial, data = shuttle)
summary(mdl3)
?InsectSprays
fil <- glm(count ~ as.factor(spray), family = poisson, data = InsectSprays)
summary(fit)
summary(fil)
exp(0.05588)
1/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knots) (x>knots)*(x-knot))
splineTerms <- sapply(knots, function(knots) (x>knots)*(x-knots))
spline terms
splineTerms
xMat <- cbind(1,x, splineTerms)
xMat
summary(lm(y~xMat-1, ))
fit <- lm(y~xMat-1)
yhat <- predict(fir)
yhat <- predict(fit)
plot(x,y)
lines(x,yhat)
y2 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- 0:5
fit2 <- lm(y2~x2)
plot(x2,y2)
summary(fit2)
fit <- lm(y~xMat)
plot(x,y)
summary(fit)
plot(x,y)
lines(x,yhat)
2.03723-1.02416
setwd("C:/Users/LeninGrib/Desktop/DS/R/course8/CP8")
library(caret)
trdat = read.csv("pml-training.csv")
testing = read.csv("pml-testing.csv")
set.seed(29)
inTrain = createDataPartition(dat$classe,
p = 3/4)[[1]]
training = dat[inTrain,]
validation = dat[-inTrain,]
inTrain = createDataPartition(trdat$classe,
p = 3/4)[[1]]
training = trdat[inTrain,]
validation = trdat[-inTrain,]
thres = 0.9
NAcols <- apply(training, 2,
FUN = function(x){sum(is.na(x)) > (nrow(training)*thres)})
sum(NAcols)
NNAcols <- names(subset(NAcols, NAcols == F))
training <- training[NNAcols]
NZVcols <- nearZeroVar(training)
training <- training[-NZVcols]
training <- training[-c(1:6)]
dim(training)
trvars <- names(training)
validation <- validation[trvars]
testing <- testing[trvars]
testing[1]
testing[x]
testing[trvars]
testing[C("X", "user.name")]
testing <- testing[,trvars]
validation <- validation[,trvars]
dim(validation)
names(validation)
names(testing)
set.seed(29)
## partition
inTrain = createDataPartition(trdat$classe,
p = 3/4)[[1]]
training = trdat[inTrain,]
validation = trdat[-inTrain,]
names(validation)
dim(validation)
dim(testing)
thres = 0.9
NAcols <- apply(training, 2,
FUN = function(x){sum(is.na(x)) > (nrow(training)*thres)})
sum(NAcols)
NNAcols <- names(subset(NAcols, NAcols == F))
training <- training[NNAcols]
### NZV
NZVcols <- nearZeroVar(training)
training <- training[-NZVcols]
### info
training <- training[-c(1:6)]
dim(training)
trvars <- names(training)
validation <- validation[,trvars]
testing <- testing[,trvars]
clean_testing <- testing[,trvars]
testdata = read.csv("pml-testing.csv")
testing <- testdata[,trvars]
NAcols <- apply(testdata, 2,
FUN = function(x){sum(is.na(x)) > (nrow(testdata)*thres)})
sum(NAcols)
validation <- validation [trvars]
testing <- testdata[,trvars]
rm(list=ls())

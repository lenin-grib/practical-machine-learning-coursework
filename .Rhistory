for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(new_cat_comp[1],
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
summary(fit)$coef[j,1],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
as.character(summary(fit)$coef[j,1]),
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
row.names(summary(fit)$coef[j,1])[j],
summary(fit)$coef[j,2],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j+1],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs[[i]] <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
new_cat_comp <- relevel(college1$major_category, "Business")
summary(lm(median_adj ~ new_cat_comp, college1))
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4])
}
pvs
pvs <- data.frame()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- rbind(pvs,c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
pvs
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
install.packages(rlist)
install.packages("rlist")
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
library(rlist)
pvs <- list()
n = length(cats)
for (i in 1:n){
new_cat_comp <- relevel(college1$major_category,
as.character(unique(college1$major_category[i])))
fit <- lm(median_adj ~ new_cat_comp, college1)
for (j in 1:(n-1)){
if (summary(fit)$coef[j,4] < 0.05){
pvs <- list.append(c(as.character(new_cat_comp[1]),
variable.names(fit)[j],
summary(fit)$coef[j,1],
summary(fit)$coef[j,4]))
}
pvs
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits$visits)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- gml(visits ~ date, hits, poisson, offset=log(visits+1))
mdl2 <- glm(visits ~ date, hits, poisson, offset=log(visits+1))
mdl2 <- glm(visits ~ date, hits, family = "poisson", offset=log(visits+1))
mdl2 <- glm(simplystats ~ date, hits, family = "poisson", offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
install.packages("MASS")
library(MASS)
?shuttle
mdl <- glm(use ~ wind, family = "binary", data = shuttle)
?glm
mdl <- glm(use ~ wind, family = binomial, data = shuttle)
summary(mdl)
?shuttle
head(shuttle)
exp(-0.03181)
mdl2 <- glm(use ~ wind + magn, family = binomial, data = shuttle)
summary(mdl2)
exp(-3.201e-02)
mdl3 <- glm((1 - use) ~ wind, family = binomial, data = shuttle)
mdl3 <- glm(I(1 - use) ~ wind, family = binomial, data = shuttle)
shuttle$useno <- shuttle$use == "auto"
head(shuttle)
shuttle$useno <- as.integer(shuttle$use == "auto")
head(shuttle)
shuttle$windno <- as.integer(shuttle$wind == "head")
mdl <- glm(useno ~ windno, family = binomial, data = shuttle)
summary(mdl)
mdl2 <- glm(useno ~ windno + magn, family = binomial, data = shuttle)
summary(mdl2)
mdl3 <- glm(I(1 - useno) ~ windno, family = binomial, data = shuttle)
summary(mdl3)
?InsectSprays
fil <- glm(count ~ as.factor(spray), family = poisson, data = InsectSprays)
summary(fit)
summary(fil)
exp(0.05588)
1/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knots) (x>knots)*(x-knot))
splineTerms <- sapply(knots, function(knots) (x>knots)*(x-knots))
spline terms
splineTerms
xMat <- cbind(1,x, splineTerms)
xMat
summary(lm(y~xMat-1, ))
fit <- lm(y~xMat-1)
yhat <- predict(fir)
yhat <- predict(fit)
plot(x,y)
lines(x,yhat)
y2 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x2 <- 0:5
fit2 <- lm(y2~x2)
plot(x2,y2)
summary(fit2)
fit <- lm(y~xMat)
plot(x,y)
summary(fit)
plot(x,y)
lines(x,yhat)
2.03723-1.02416
setwd("C:/Users/LeninGrib/Desktop/DS/R/course8/CP8")
library(caret)
trdat = read.csv("pml-training.csv")
testdata = read.csv("pml-testing.csv")
set.seed(29)
## partition
inTrain = createDataPartition(trdat$classe,
p = 3/4)[[1]]
training = trdat[inTrain,]
validation = trdat[-inTrain,]
## clean
### NA 90%
thres = 0.9
NAcols <- apply(training, 2,
FUN = function(x){sum(is.na(x)) > (nrow(training)*thres)})
sum(NAcols)
NNAcols <- names(subset(NAcols, NAcols == F))
training <- training[NNAcols]
### NZV
NZVcols <- nearZeroVar(training)
training <- training[-NZVcols]
### info
training <- training[-c(1:6)]
dim(training)
### apply
trvars <- names(training)
validation <- validation [trvars]
testing <- testdata[,trvars]
testing <- testdata[trvars]
test(names(trdat), names(testdata))
names(testdata)
tstvars <- names(training[,-"classe"])
tstvars <- names(training[,-c("classe")])
names(training)
dim(training)
tstvars <- names(training[,-53])
testing <- testdata[tstvars]
dim(testing)
library(rpart)
library(rpart.plot)
library(rattle)
library(e1071)
set.seed(29)
mrf <- train(classe ~., data = training, method = "rf")
set.seed(29)
tc <- trainControl(method = "cv", number = 7,
verboseIter=FALSE , preProcOptions="pca",
allowParallel=TRUE)
mrfst <- system.time (mrf <- train(classe ~.,
data = training, method = "rf", trControl= tc))
install.packages("parallel")
install.packages("doParallel")
set.seed(29)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
tc <- trainControl(method = "cv", number = 5,
allowParallel=TRUE)
mclst <- system.time (mcl <- train(classe ~.,
data = training, method = "class",
verbose = FALSE, trControl= tc))
mrpst <- system.time (mrp <- train(classe ~.,
data = training, method = "rpart",
trControl= tc))
mgbmst <- system.time (mgbm <- train(classe ~.,
data = training, method = "gbm",
verbose = FALSE, trControl= tc))
mrfst <- system.time (mrf <- train(classe ~.,
data = training, method = "rf", trControl= tc))
mrfdt
mrfst
mrfst$system
mrfst[2]
comp[4] <- c("svm",
confusionMatrix(psvm, validation$classe)$overall[1],
msvmst)
msvmst <- system.time (msvm <- svm(classe ~ .,
data = training, trControl= tc))
stopCluster(cluster)
registerDoSEQ()
prf <- predict(mrf, validation)
pgbm <- predict(mgbm, validation)
prp <- predict(mrp, validation)
psvm <- predict(msvm, validation)
comp <- data.frame(matrix(ncol = 3, nrow = 0))
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
comp
comp[1] <- c("random forest",
confusionMatrix(prf, validation$classe)$overall[1],
mrfst[2])
comp1 <- c("random forest",
confusionMatrix(prf, validation$classe)$overall[1],
mrfst[2])
comp <- rbind(comp, comp1)
comp
comp2 <- c("boosting",
confusionMatrix(pgbm, validation$classe)$overall[1],
mgbmst[2])
comp3 <- c("decision tree",
confusionMatrix(prp, validation$classe)$overall[1],
mrpst[2])
comp4 <- c("svm",
confusionMatrix(psvm, validation$classe)$overall[1],
msvmst[2])
comp <- rbind(comp1, comp2, comp3, comp4)
comp
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
comp
comp <- cbind(comp1, comp2, comp3, comp4)
comp
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
comp
install.packages("kableExtra")
library(knitr)
library(kableExtra)
library(dplyr)
stacked <- data.frame(prf, pgbm, psvm, validation$classe)
dim(stacked)
mstackedlm <- train(validation$classe ~ ., data = stacked, method = "glm")
names(stacked)
mstackedlm <- train(validation.classe ~ ., data = stacked, method = "glm")
?train
names(getModelInfo())
mstackedlm <- train(validation.classe ~ ., data = stacked, method = "glm")
stacked <- data.frame(prf, pgbm, psvm, training$classe)
mrf$finalModel
mrf$finalModel$err.rate
mrf$finalModel$oob.times
postResample(prf, validation$classe)
comp
1-comp[1,2]
1-as.numeric(comp[1,2])
comp[1,2]
1-as.numeric(as.character(comp[1,2]))
qplot(mrf)
qplot(mrf$finalModel)
table(training)
1-as.numeric(as.character(comp[1,2]))
comp
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, cache = TRUE)
par(mfrow=c(1,2))
varImpPlot(mrf, cex=0.7, pch=16, main='Variable Importance Plot: rfMod.exclude')
?varimpplot
library(randomForest)
par(mfrow=c(1,2))
varImpPlot(mrf, cex=0.7, pch=16, main='Variable Importance Plot: rfMod.exclude')
plot(mrf, , cex=0.7, main='Error vs No. of trees plot')
predict(mrf, testing)
varImp(mrf)
plot(varimp(mrf))
plot(varImp(mrf))
rownames(varImp(mrf))
?varImp
varImp[1,1]
?closure
arglist(varImp)
class(varimp(mrf))
class(VarImp(mrf))
class(varImp(mrf))
?varImp.train
mrfst <- system.time (mrf1 <- train(classe ~ roll_belt,
data = training, method = "rf", trControl= tc))
mrf1
mrfstAdj <- system.time (mrfAdj <- train(classe ~ roll_belt +
pitch_forearm + yaw_belt + magnet_dumbbell_z +
pitch_belt + magnet_dumbbell_y +
roll_forearm + accel_dumbbell_y,
data = training, method = "rf", trControl= tc))
prfAdj <- predict(mrfAdj, validation)
comp5 <- c("random forest8",
confusionMatrix(prfAdj, validation$classe)$overall[1],
mrfstAdj[2])
comp <- rbind(comp, comp5)
comp
comp5 <- c("random forest8",
confusionMatrix(prfAdj, validation$classe)$overall[1],
mrfstAdj[2])
comp5
comp <- data.frame(matrix(ncol = 3, nrow = 6))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
comp
comp5 <- c("method" = "random forest8", "accuracy" =
confusionMatrix(prfAdj, "running time" = validation$classe)$overall[1],
mrfstAdj[2])
mrfAdj
prfAdj <- predict(mrfAdj, validation)
comp5 <- c("method" = "random forest8", "accuracy" =
confusionMatrix(prfAdj, "running time" = validation$classe)$overall[1],
mrfstAdj[2])
colnames(comp5) <- x
comp <- rbind(comp, comp5)
comp
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
prfAdj <- predict(mrfAdj, validation)
comp5 <- c("method" = "random forest8", "accuracy" =
confusionMatrix(prfAdj, "running time" = validation$classe)$overall[1],
mrfstAdj[2])
colnames(comp5) <- x
comp <- rbind(comp, comp5)
comp
prfAdj <- predict(mrfAdj, validation)
comp5 <- c("method" = "random forest8", "accuracy" =
confusionMatrix(prfAdj, "running time" = validation$classe)$overall[1],
mrfstAdj[2])
names(comp5) <- x
comp5
comp <- rbind(comp, comp5)
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
comp5 <- c("method" = "random forest8", "accuracy" =
confusionMatrix(prfAdj, "running time" = validation$classe)$overall[1],
mrfstAdj[2])
comp5 <- c("random forest8", confusionMatrix(prfAdj,
validation$classe)$overall[1], mrfstAdj[2])
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
prfAdj <- predict(mrfAdj, validation)
comp5 <- c("random forest8", confusionMatrix(prfAdj,
validation$classe)$overall[1], mrfstAdj[2])
names(comp5) <- x
comp <- rbind(comp, comp5)
comp
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4)
comp5 <- c("random forest8", confusionMatrix(prfAdj,
validation$classe)$overall[1], mrfstAdj[2])
comp
mrfstAdj2 <- system.time (mrfAdj2 <- train(classe ~ roll_belt +
pitch_forearm + yaw_belt + magnet_dumbbell_z +
pitch_belt ,
data = training, method = "rf", trControl= tc))
prfAdj2 <- predict(mrfAdj2, validation)
comp6 <- c("random forest19",
confusionMatrix(prfAdj2, validation$classe)$overall[1],
mrfstAdj2[2])
comp <- rbind(comp, comp6)
comp
prfAdj2 <- predict(mrfAdj2, validation)
comp6 <- c("random forest5",
confusionMatrix(prfAdj2, validation$classe)$overall[1],
mrfstAdj2[2])
comp <- rbind(comp, comp6)
comp
comp5
comp <- data.frame(matrix(ncol = 3, nrow = 0))
comp <- rbind(comp, comp1, comp2, comp3, comp4, comp5, comp6)
x <- c("method", "accuracy", "running time")
colnames(comp) <- x
comp
